WEEK 1 (JUNE 6 - JUNE 10)

I found and fixed a bug and created my first PR.

I did the following:
-Open story (a story is job, or a task to complete)
-Open file.
-Go to the website and inspect. Find the bug.
-Search for it on VS Code.
-Once you find it, open the terminal
-Command: git pull (makes sure you have the latest, most accurate code)
-Command: git branch (you’ll see ‘staging’ in green)
-Command: git checkout -b <2nd line under ‘git helpers’ in notion story> hit enter
-Make changes to code
-Command: git add .
-Command: git commit (emoji log - on vs code command shift P, name the change, click check mark)
-Command: git push origin nameOfBranch (edited)
-Go to github to PR fill out form
-Command: git checkout staging (takes me off my branch and back to code base/master/main)

When Making Changes on the Same Branch…
-Command: git pull
-Command: git checkout -b <name of branch>
Make changes
-Command: git add .
-Command: git commit -m <emoji-log>
-Command: git push origin <name of branch>

Pull requests are a way to submit your work to a project. It's called a pull request because you're asking the project to pull changes from your fork.

WEEK 1 SUMMARY
Week one was all about orientation and setting up my dev environment. I finally learned the power of github after spending two years just pushingforking, cloning. I’m beginning to understand how github is used in a dev team. I created my first PR for a simple bug. I sat in on my first sprint planning but it didn't make a lot of sense -- I think that'll change over time as I understand the language and lingo more.

I learned that set-up and installing can sometimes be frustrating but even more experienced devs have the same problems. Patience and a good long google search usually solve the problem.

WEEK 1 RESOURCES
https://gitexplorer.com/ 

WEEK 1 QUESTIONS
-What are the top 10 most common git commands?


///////////////////////////////////////////////////////////////
WEEK 2 (JUNE 13 - 17)
During week 2, I dug into the code base and learned how to import and export (kind of!) I also started working on my first REAL WORLD project this week: the Wifi Landing Page. This page will allow in-store customers to connect to wifi. This is super exciting because it'll actually be used by real customers. 

Creating component structure
-Go into pages and create the file
-Create an index.js file
-Format: import { NameOfYourFile } from "@components"
export default NameOfYourFile;
-Go to big index.js in components
-Format: export { default as NameOfYourFile } from ‘./NameOfYourFile’
-Make the file in components
-Create outer index.js and styled.js files
-Then create a components folder
-Create index.js and styled.js files for each component

Create a component
-Index.js file
-import React 
-Import styled files 
-Import @ components
-Import @ utils

Styled.js file
-import styled from 'styled-components';
-import { colors, typography } from '@utils';


Styled Components
export const EnterEmailContainer = styled.div`
    display: flex;
    flex-direction: column;
    justify-content: center;
    align-items: center;
    padding: 2.5rem 1.5rem;
    background: ${colors.white};
    flex-grow: 1;
`;

export const WelcomeText = styled(typography.H1a)``;

Week two was about creating components and learning how to import/export them. Honestly, I don't have a good grasp on this yet but I think repetition will help. I also began working styled components. Styled components are pretty awesome; they're a hybrid of React components and vanilla CSS. All of my hardwork on CSS has paid off!

WEEK 2 RESOURCES
how to import/export in Foxtrot-next: https://sunnysingh.io/blog/javascript-import-from-folder

WEEK 2 CODE Example
Look at: Authentication component for example on how ro import/export

Questions
How do props work with Styled Components?


///////////////////////////////////////////////////////////////
WEEK 3 (June 20 - June 24)
Creating a Tango Component
-Format: export { default as NameOfFile } from './NameOfFile';
-Create component
-Add index.js and styled.js


go to pages -> testing -> index.js -> TestPage and plug in component
remember to remove:            {signInWithApple && (


then go to test-utils -> testingData.js -> and plug component in!
Add component to test-utils → testingData.js:
export const testTangoEmailSignup = {
    enterEmailText: 'Please enter your email',
    buttonText: 'Submit & Continue',
    redirectUrl: '/home',
};


Remember: Props come from above.

In week 3, I created a Tango Component. Essentially, Tango Components go into a library. They can be plugged in whenever needed. I learned how to learn Test.js to test out tango components. I participated in my first story pointing meeting and I learned what a spike is. A spike is essentially doing a fact finding mission/doing research on a particular product.



///////////////////////////////////////////////////////////////
WEEK 4 (June 27 - July 1)
In week 4, I began working on the final big project which is the cafe-pickup project. Got stuck with imports/exports again at the end of the week but figured it out on Friday.

ProductsButton.proptypes = {
    buttonText: PropTypes.string,
    // redirectUrl: PropTypes.string,
};
ProductsButton.defaultProps = {
    buttonText: 'Checkout',
    // redirectUrl: '/home',
};

Component.proptypes = {
  stringProp: PropTypes.string,         // The prop should be a string
  numberProp: PropTypes.number,         // The prop should be a number
  anyProp: PropTypes.any,               // The prop can be of any data type
  booleanProp: PropTypes.bool,          // The prop should be a function
  functionProp: PropTypes.func          // The prop should be a function
  arrayProp: PropTypes.array            // The prop should be an array
}


Analytics Tracking: Segment

import { segment } from '@utils';
function handleTcButtonClick() {
        setShowModal(true);
        segment.track('Terms and conditions modal open');
    }

Week 4 was heavy. Lots of ups and downs…but learned a lot. Coming off of last week, I learned about propTypes. PropTypes are a mechanism to ensure that components use the correct data type and pass the right data, and that components use the right type of props, and that receiving components receive the right type of props. In a complex application, it is always a good practice to use propTypes. I always learned about merge & on github. Merge and squash essentially hides all of the messy commits before merging the branch. The last couple weeks I’ve begun working with QA which has been a little difficult. Sometimes I have trouble explaining how to find a bug or a feature…but it’s been great real-world practice. I hope to have more meetings with QA so I can improve my communication skills.




///////////////////////////////////////////////////////////////
WEEK 5 (July 5 - July 8)

Week 5 was a short week. I really dug in on the cafe pick up project. We tried to break down the project into tickets and did story pointing. I realized that being able to break big, complex projects into simpler tasks is half the battle. When you do this, things seem a lot more manageable.

I learned about Sentry which is Foxtrot's error tracking software. Sentry is very granular in its error tracking, so it can detect errors that don't show up in the console. Sentry basically pinpoints the error and directs you to where the error is in the code.

I also took part in a 'Production Outage' meeting. I learned what a production outage is and how to deal with one. A production outage is some major error that occurs on the live site. Instead of trying to find the error and fix it, the first thing you should do is role back the code to the last working version. Then, you should dig in to sentry and try to pinpoint the error.

useEffect Anti-Patterns
-useEffect - avoid using this in general
-useEffect - avoid using it to set state
-useEffect - do not call this conditionally
-useEffect - avoid having dependencies in there that aren’t in the dependency block ([] at the end)


I'm beginning to see a pattern: getting stuck is inevitable but finding a solution is also inevitable if you keep at it. In week 3, I got stuck and gave myself a headache trying to find a solution. Unfortunately, I did the same thing in week 5. Next time, I should realize that theres not reason to give myself a headache because the solution will eventually will come if I keep at it. This week I also started using a new PR template. The template takes more time to complete but is better for my own development because it forces me to answer "why" -- this makes me reflect on the code and think about the purpose it serves.





///////////////////////////////////////////////////////////////
Week 6 (July 11 - July 15)
Passing props in styled-components


Props declared in styled component...
const TangoButtonStyles = styled.button`
    display: flex;
    align-items: center;
    flex-direction: ${(props) => (props.iconPosition === 'right' ? '' : 'row-reverse')};
    justify-content: space-between;
    }

Props used in return statement...
const TangoButtonContent = React.forwardRef((props, ref) => {
    TangoButtonContent.displayName = 'TangoButtonContent';
    return (
        <>
            <Text isLoading={props.isLoading} iconPosition={props.iconPosition} ref={ref}>
                {props.text}
            </Text>
            {props.iconName && <Icon name={props.iconName} size={props.iconSize || '1em'} color="currentColor" />}
            {props.isLoading && <TangoLoader />}
        </>
    );
});

One way to map a component:

let itemArray = cart?.items;
    console.log(itemArray);
    const cardEl = itemArray?.map((prod) => {
        return (
            <Container key={prod.id}>
                <ProductPriceContainer>
                    <ProductPriceContainer key={prod.id}>
                        <ProductName>{prod.title}</ProductName>
                        <ProductPrice>{prod.price}</ProductPrice>
                    </ProductPriceContainer>
                </ProductPriceContainer>
                <Modifications>Customizations: Small, Whole Milk, Sweetened</Modifications>
                <RemoveEditContainer>
                    <TextButton>
                        <CardButtons>Remove</CardButtons>
                    </TextButton>
                    <TextButton>
                        <CardButtons>Edit</CardButtons>
                    </TextButton>
                    <TextButton>
                        <CardButtons>Add Another</CardButtons>
                    </TextButton>
                </RemoveEditContainer>
            </Container>
        );
    });

    return <>{cardEl}</>;
}




I Want to know: 
useContext
useRouter
Routing patterns 
interfacing with API endpoints
fetching data
React Hooks
Styled Components